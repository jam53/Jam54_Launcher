<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jam54</groupId>
    <artifactId>Jam54_Launcher</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Jam54_Launcher</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.8.2</junit.version>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>21</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>21</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.11.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.16.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.15.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.17.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.46.0.0</version>
            <scope>runtime</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.nothome/javaxdelta -->
        <dependency>
            <groupId>com.nothome</groupId>
            <artifactId>javaxdelta</artifactId>
            <version>2.0.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>21</release>
<!--
The <release> tag defines the versions used for the source code and the bytecode that gets compiled. 

As for why we specify the version explicitly. Suppose we publish the Jam54 Launcher with Java 17 and later release an update compiled with Java 18. Since updating the Jam54 Launcher only involves replacing the JAR file, this will lead to problems. The JAR will now be compiled with Java 18, while the JRE bundled with the Jam54 Launcher will still be version 17. Since the version of our Jam54 Launcher JAR is higher than the JRE it's running on, it will not work, resulting in the following type of error:

Error: LinkageError occurred while loading main class com.jam54.jam54_launcher.Main
java.lang.UnsupportedClassVersionError: com/jam54/jam54_launcher/Main has been compiled by a more recent version of the Java Runtime (class file version 62.0), this version of the Java Runtime only recognizes class file versions up to 61.0

So, we need to make sure that: JRE version >= JAR version.

Using a particular JDK, it's possible to target the same or older versions of Java when building a JAR, therefore: JDK version >= target Java version.

The JDK used by the `maven-compiler-plugin` to build our JAR is the one specified in our PATH/system environment variable.

We target Java 21 because it was the latest version of Java when we first released the launcher, and thus the version of the JRE on users' devices. Therefore it is crucial that we do not change the version specified by the release tag. As during updates only the Jam54Launcher.jar gets updated and the JRE remains unchanged.
-->
                </configuration>
            </plugin>
            <!--This plugin is used to build FAT/Uber jars-->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <!--Makes it so the produced jar contains a manifest file. This allows us to run the jar using `java -jar file.jar`. Rather than having to run it as follows `java -cp file.jar path.to.main.class`-->
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <packageName>com.jam54.jam54_launcher</packageName>
                            <mainClass>com.jam54.jam54_launcher.Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!--Copy the dependency jars to the target folder-->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-maven-plugin -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.jam54.jam54_launcher/com.jam54.jam54_launcher.Main</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>