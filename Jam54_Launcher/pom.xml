<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jam54</groupId>
    <artifactId>Jam54_Launcher</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Jam54_Launcher</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.8.2</junit.version>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>21</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>21</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson-->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.13.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.13.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.16.0</version>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.43.0.0</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
<!--                    Dit zijn de versies die gebruikt worden voor de source code in het project en voor de bytecode die gecompileerd wordt. Men gebruikt best dezelfde versie voor source & target.-->

<!--                    Waarom zetten we versie vast? Stel we publiceren de jam54 launcher met Java 17 en brengen wat later een update uit met Java 18. Sinds we bij het updaten van de jam54 launcher alleen de jar vernieuwen zal dit tot problemen leiden. De jar zal nu in Java 18 gecompileerd zijn, terwijl de JRE die bij de jam54 launcher nog versie 17 zal hebben. Sinds de versie van onze jam54 launcher jar hoger is dan de JRE waarmee het gerunned wordt lukt dit niet. Dit geeft een error van de vorm:-->

<!--                    Error: LinkageError occurred while loading main class com.jam54.jam54_launcher.Main-->
<!--                    java.lang.UnsupportedClassVersionError: com/jam54/jam54_launcher/Main has been compiled by a more recent version of the Java Runtime (class file version 62.0), this version of the Java Runtime only recognizes class file versions up to 61.0-->

<!--                    Dus basically moet gelden, versie JRE >= versie JAR-->

<!--                    Het is ook mogelijk om te builden voor oudere Java versies met meer recentere JDK's, dus er moet gelden, versie JDK >= versie target Java-->

<!--                    De JDK die wordt gebruikt door `maven-compiler-plugin` om onze jar te builden, is degene die staat in ons PATH-->

<!--                    We gebruiken Java 21 als doel omdat dit de meest recente versie van Java was op het moment dat we de launcher voor het eerst publiceerden, dat is dus de versie van de JRE die op mensen hun apparaat staat. Het spreekt dus voor zich dat we versie van source/target en/of de versie van de dependencies niet meer willen veranderen. Want tijdens het updaten van de launcher wordt enkel de Jam54Launcher.jar upgedate. De JRE/jar's van de dependencies blijven ongewijzigd.-->

                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-maven-plugin-->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.jam54.jam54_launcher/com.jam54.jam54_launcher.Main</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>